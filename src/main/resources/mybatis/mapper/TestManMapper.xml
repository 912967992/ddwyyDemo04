<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lu.ddwyydemo04.dao.TestManDao">

    <select id="getTestManPanel" resultType="Samples">
        select * from samples where tester =#{tester}  ORDER BY create_time DESC
    </select>

    <select id="queryCountTotal" resultType="int">
        select count(*) from total where name =#{name}
    </select>


    <insert id="createTotal">
        insert into total(testing,pending,completed,total,overdue,danger,name) values(#{testing},#{pending},#{completed},#{total},#{overdue},#{danger},#{name})
    </insert>


    <update id="updateTotal" parameterType="String">
        UPDATE total t
        SET
        t.testing = (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '0' AND s.tester = #{name}),
        t.pending = (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '1' AND s.tester = #{name}),
        t.completed = (SELECT COUNT(*) FROM samples s WHERE (s.sample_schedule = '2' OR s.sample_schedule = '9' OR s.sample_schedule = '10') AND s.tester = #{name}),
        t.total =
        (
        (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '0' AND s.tester = #{name}) +
        (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '1' AND s.tester = #{name}) +
        (SELECT COUNT(*) FROM samples s WHERE (s.sample_schedule = '2' OR s.sample_schedule = '9' OR s.sample_schedule = '10') AND s.tester = #{name})
        ),
        t.overdue = (SELECT COUNT(*) FROM samples s WHERE s.tester = #{name}
        AND s.create_time >= '2025-08-01 00:00:00'
        AND (
        (s.finish_time IS NULL AND NOW() > s.scheduleEndTime) OR
        (s.finish_time IS NOT NULL AND s.scheduleEndTime &lt; s.finish_time) OR
        (s.sample_schedule = '0' AND NOW() > s.scheduleEndTime)
        )),
        t.danger = (SELECT COUNT(*) FROM samples s WHERE s.danger IS NOT NULL AND s.danger != '' AND s.tester = #{name})
        WHERE t.name = #{name}
    </update>




    <select id="searchSamples" resultType="Samples">
        SELECT * FROM samples
        WHERE
            tester =#{tester}
          AND (
                sample_model LIKE CONCAT('%', #{keyword}, '%')
                OR sample_coding LIKE CONCAT('%', #{keyword}, '%')
                OR sample_name LIKE CONCAT('%', #{keyword}, '%')
                OR full_model LIKE CONCAT('%', #{keyword}, '%')
                OR supplier LIKE CONCAT('%', #{keyword}, '%')
                OR questStats LIKE CONCAT('%',#{keyword},'%')
            );
    </select>

    <select id="searchSamplesByAsc" resultType="Samples">
        SELECT * FROM samples
        WHERE
            tester =#{tester}
          AND (
                    sample_model LIKE CONCAT('%', #{keyword}, '%')
                OR sample_coding LIKE CONCAT('%', #{keyword}, '%')
                OR sample_name LIKE CONCAT('%', #{keyword}, '%')
                OR full_model LIKE CONCAT('%', #{keyword}, '%')
                OR supplier LIKE CONCAT('%', #{keyword}, '%')
                OR questStats LIKE CONCAT('%',#{keyword},'%')
                OR electric_sample_id LIKE CONCAT('%',#{keyword},'%')
                OR sample_id LIKE CONCAT('%',#{keyword},'%')
            )
        ORDER BY create_time ASC
    </select>

    <select id="searchSamplesByDesc" resultType="Samples">
        SELECT * FROM samples
        WHERE
            tester =#{tester}
          AND (
                    sample_model LIKE CONCAT('%', #{keyword}, '%')
                OR sample_coding LIKE CONCAT('%', #{keyword}, '%')
                OR sample_name LIKE CONCAT('%', #{keyword}, '%')
                OR full_model LIKE CONCAT('%', #{keyword}, '%')
                OR supplier LIKE CONCAT('%', #{keyword}, '%')
                OR questStats LIKE CONCAT('%',#{keyword},'%')
                OR electric_sample_id LIKE CONCAT('%',#{keyword},'%')
                OR sample_id LIKE CONCAT('%',#{keyword},'%')
            )
        ORDER BY create_time DESC
    </select>

    <update id="updateSample" parameterType="Samples">
        UPDATE samples
        SET
            sample_name = #{sample_name},
            chip_control = #{chip_control},
            version_software = #{version_software},
            version_hardware = #{version_hardware},
            supplier = #{supplier},
            test_Overseas = #{test_Overseas},
            sample_DQE = #{sample_DQE},
            sample_Developer = #{sample_Developer},
            tester = #{tester},
            filepath = #{filepath},
            sample_leader = #{sample_leader},
            priority = #{priority},
            sample_remark = #{sample_remark},
            planTestDuration = #{planTestDuration},
            electric_sample_id = #{electric_sample_id}
        WHERE
            sample_id =#{sample_id}
    </update>

    <update id="updateSampleTeamWork" parameterType="Samples">
        UPDATE samples
        SET
            sample_name = #{sample_name},
            chip_control = #{chip_control},
            version_software = #{version_software},
            version_hardware = #{version_hardware},
            supplier = #{supplier},
            test_Overseas = #{test_Overseas},
            sample_DQE = #{sample_DQE},
            sample_Developer = #{sample_Developer},
            tester = #{tester},
            filepath = #{filepath},
            tester_teamwork = CONCAT(tester_teamwork, ', ', #{tester}),
            sample_leader = #{sample_leader},
            priority = #{priority},
            sample_remark = #{sample_remark},
            planTestDuration = #{planTestDuration},
            electric_sample_id = #{electric_sample_id}
        WHERE
            sample_id =#{sample_id}
    </update>

    <update id="finishTest" >
        UPDATE samples
        SET
            sample_schedule =#{sample_schedule}
        WHERE
            sample_id =#{sample_id}
    </update>

    <update id="finishTestWithoutTime">
        UPDATE samples
        SET
            sample_schedule = #{sample_schedule},
            finish_time = CASE
                              WHEN finish_time IS NULL AND #{finish_time} IS NOT NULL THEN #{finish_time}
                              ELSE finish_time
                END
        WHERE
            sample_id = #{sample_id}
    </update>






    <select id="queryCreateTime" resultType="java.time.LocalDateTime">
        SELECT create_time FROM samples
        WHERE
                sample_id =#{sample_id}
    </select>

    <select id="queryPlanFinishTime" resultType="java.math.BigDecimal">
        SELECT planTestDuration FROM samples
        WHERE
            sample_id =#{sample_id}
    </select>


    <select id="querySample_name" resultType="String">
        SELECT sample_name FROM samples
        WHERE
            sample_id =#{sample_id}
    </select>

    <select id="queryFilepath" resultType="String">
        SELECT filepath FROM samples
        WHERE
            sample_id = #{sample_id}
    </select>

    <select id="queryTester_teamwork" resultType="String">
        SELECT tester_teamwork FROM samples
        WHERE
                sample_id =#{sample_id}
    </select>


    <select id="queryTester" resultType="String">
        SELECT tester FROM samples
        WHERE
            sample_id =#{sample_id}
    </select>

    <delete id="deleteFromTestIssues">
        DELETE FROM test_issues WHERE sample_id = #{sampleId}
    </delete>
    <delete id="deleteFromSamples">
        DELETE FROM samples WHERE sample_id = #{sampleId}
    </delete>




<!-- 下边是提取问题点的相关模块-->
    <select id="querySampleId" resultType="int">
        SELECT sample_id FROM samples
        WHERE
            filepath = #{filepath}
    </select>

    <insert id="insertTestIssues" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO test_issues (
            full_model,
            sample_stage,
            version,
            chip_solution,
            problem_time,
            tester,
            test_platform,
            test_device,
            other_device,
            problem,
            problemCategory,
            problem_image_or_video,
            reproduction_method,
            recovery_method,
            reproduction_probability,
            defect_level,
            current_status,
            comparison_with_previous,
            responsible_person,
            post_improvement_risk,
            next_version_regression_test,
            remark,
            created_at,
            sample_id,
            history_id,
            sku, green_union_dqe, green_union_rd, solution_provider, supplier, review_conclusion,
            responsibleDepartment,dqe,dqe_confirm,dqe_review_at, test_Overseas
        ) VALUES (
                     #{full_model},
                     #{sample_stage},
                     #{version},
                     #{chip_solution},
                     #{problem_time},
                     #{tester},
                     #{test_platform},
                     #{test_device},
                     #{other_device},
                     #{problem},
                     #{problemCategory},
                     #{problem_image_or_video},
                     #{reproduction_method},
                     #{recovery_method},
                     #{reproduction_probability},
                     #{defect_level},
                     #{current_status},
                     #{comparison_with_previous},
                     #{responsible_person},
                     #{post_improvement_risk},
                     #{next_version_regression_test},
                     #{remark},
                     #{created_at},
                     #{sample_id},
                     #{history_id},
                     #{sku}, #{green_union_dqe}, #{green_union_rd}, #{solution_provider}, #{supplier}, #{review_conclusion},
                    #{responsibleDepartment},#{dqe}, #{dqe_confirm} ,#{dqe_review_at} ,#{test_Overseas}
                 )
    </insert>


    <select id="queryHistoryid" resultType="int">
        SELECT COALESCE(MAX(history_id), 0) + 1
        FROM test_issues
        WHERE sample_id = #{sample_id}
    </select>

    <update id="setDuration" >
        UPDATE samples
        SET
            planTestDuration =#{planTestDuration},
            testDuration =#{testDuration}
        WHERE
            sample_id =#{sample_id}
    </update>


    <select id="searchSampleTestMan" resultType="Samples">
        SELECT * FROM samples
        WHERE
        (#{keyword} IS NULL OR
        sample_model LIKE CONCAT('%', #{keyword}, '%') OR
        sample_coding LIKE CONCAT('%', #{keyword}, '%') OR
        full_model LIKE CONCAT('%', #{keyword}, '%') OR
        sample_name LIKE CONCAT('%', #{keyword}, '%') OR
        sample_category LIKE CONCAT('%', #{keyword}, '%') OR
        version LIKE CONCAT('%', #{keyword}, '%') OR
        supplier LIKE CONCAT('%', #{keyword}, '%') OR
        big_species LIKE CONCAT('%', #{keyword}, '%') OR
        small_species LIKE CONCAT('%', #{keyword}, '%') OR
        priority LIKE CONCAT('%', #{keyword}, '%') OR
        questStats LIKE CONCAT('%', #{keyword}, '%') OR
        tester LIKE CONCAT('%', #{keyword}, '%'))
        AND (#{problemTimeStart} IS NULL OR create_time >= #{problemTimeStart})
        AND (#{problemTimeEnd} IS NULL OR create_time &lt;= #{problemTimeEnd})
        AND (#{problemFinishStart} IS NULL OR finish_time >= #{problemFinishStart})
        AND (#{problemFinishEnd} IS NULL OR finish_time &lt;= #{problemFinishEnd})
        AND (#{sample_schedule} IS NULL OR sample_schedule = #{sample_schedule})
        ORDER BY create_time DESC;
    </select>

    <select id="getInterfaceData" parameterType="Integer" resultType="String">
        SELECT interfaceInfo FROM system_info WHERE id = #{id}
    </select>

    <update id="updateInterface">
        UPDATE system_info
        SET
            interfaceInfo = #{interfaceInfo}
        WHERE
            id =#{id}

    </update>

    <select id="getReceivedData" resultType="PassbackData">
        SELECT
            ei.id,
            ei.sample_id,
            ei.sample_actual_id,
            ei.sample_category,
            ei.sample_model,
            IFNULL(
                    (
                        SELECT GROUP_CONCAT(mi.materialCode SEPARATOR ',')
                        FROM material_items mi
                        WHERE mi.sample_id = ei.sample_id
                    ),
                    ei.materialCode
            ) AS materialCode,
            ei.sample_frequency,
            ei.sample_name,
            ei.version,
            ei.priority,
            ei.sample_leader,
            ei.supplier,
            ei.testProjectCategory,
            ei.testProjects,
            ei.schedule,
            ei.create_time,
            ei.scheduleDays,
            ei.isUsed,
            ei.changeRecord,
            ei.schedule_start_date,
            ei.schedule_end_date,
            ei.isCancel,
            ei.cancel_reason,
            ei.cancel_by,
            ei.cancel_date,
            ei.cancel_code,
            ei.actual_start_time,
            ei.actual_finish_time,
            ei.schedule_color,
            ei.reportReviewTime,
            ei.sampleRecognizeResult,
            ei.tester,
            ei.testDuration,
            ei.filepath,
            ei.update_time,
            ei.remark,
            ei.waitSample_classify,
            ei.sample_sender,
            ei.sample_type,
            ei.sample_quantity,
            ei.high_frequency
        FROM electric_info ei
        WHERE (ei.isUsed = 0 OR ei.isUsed IS NULL)
          AND ei.isCancel = 0
          AND (ei.waitSample_classify IS NULL OR ei.waitSample_classify = '')
          AND ei.sample_leader NOT IN ('占海英', '贺斌' ,'姚遥')
    </select>



    <select id="getPendingSampleData" resultType="PassbackData">
        SELECT *
        FROM electric_info
        WHERE waitSample_classify = #{waitSample_classify}
          AND isCancel = 0
    </select>



    <select id="queryElectricalCode" resultType="Integer">
        SELECT COUNT(*) FROM electric_info WHERE sample_id = #{sample_id}
    </select>

    <insert id="insertElectricInfo" parameterType="PassbackData">
        INSERT INTO electric_info (
            sample_id,
            sample_category,
            sample_model,
            materialCode,
            sample_frequency,
            sample_name,
            version,
            priority,
            sample_leader,
            supplier,
            testProjectCategory,
            testProjects,
            schedule,
            create_time,
            scheduleDays,
            schedule_color,
            remark,
            waitSample_classify,
            sample_sender,
            sample_type,
            sample_quantity,
            high_frequency,
            productRequirement,
            productApprovalDoc
        )
        VALUES (
                   #{sample_id},
                   #{sample_category},
                   #{sample_model},
                   #{materialCode},
                   #{sample_frequency},
                   #{sample_name},
                   #{version},
                   #{priority},
                   #{sample_leader},
                   #{supplier},
                   #{testProjectCategory},
                   #{testProjects},
                   #{schedule},
                   NOW(),
                   #{scheduleDays},
                   'yellow',
                   #{remark},
                   #{waitSample_classify},
                   #{sample_sender},
                   #{sample_type},
                   #{sample_quantity},
                   #{high_frequency},
                   #{productRequirement},
                   #{productApprovalDoc}
               )
    </insert>


    <update id="updateElectricInfo" parameterType="PassbackData">
        UPDATE electric_info
        SET
            sample_category = #{sample_category},
            sample_model = #{sample_model},
            materialCode = #{materialCode},
            sample_frequency = #{sample_frequency},
            sample_name = #{sample_name},
            version = #{version},
            priority = #{priority},
            sample_leader = #{sample_leader},
            supplier = #{supplier},
            testProjectCategory = #{testProjectCategory},
            testProjects = #{testProjects},
            schedule = #{schedule}
        WHERE sample_id = #{sample_id}
    </update>


    <!-- 根据开始日期查询排期信息 -->
    <select id="getSchedulesByStartDate" resultType="ElectricScheduleInfo">
        SELECT
            ei.id,
            ei.sample_id,
            ei.sample_actual_id,
            ei.sample_category,
            ei.sample_model,
            (
                SELECT GROUP_CONCAT(mi.materialCode SEPARATOR ',')
                FROM material_items mi
                WHERE mi.sample_id = ei.sample_id
            ) AS materialCode,
            ei.sample_frequency,
            ei.sample_name,
            ei.version,
            ei.priority,
            ei.sample_leader,
            ei.supplier,
            ei.testProjectCategory,
            ei.testProjects,
            ei.schedule,
            ei.create_time,
            ei.scheduleDays,
            ei.isUsed,
            ei.changeRecord,
            ei.schedule_start_date,
            ei.schedule_end_date,
            ei.isCancel,
            ei.cancel_reason,
            ei.cancel_by,
            ei.cancel_date,
            ei.cancel_code,
            ei.actual_start_time,
            ei.actual_finish_time,
            ei.schedule_color,
            ei.reportReviewTime,
            ei.sampleRecognizeResult,
            ei.tester,
            ei.testDuration,
            ei.filepath,
            ei.update_time,
            ei.remark,
            ei.waitSample_classify
        FROM electric_info ei
        WHERE (
                    ei.schedule_start_date >= #{schedule_start_date}
                OR (ei.schedule_end_date >= #{schedule_start_date} AND ei.schedule_end_date IS NOT NULL)
            )
          AND ei.isUsed = 1
        ORDER BY
            ei.update_time ASC
    </select>



    <select id="getSchedulesByStartAndEndDate" resultType="ElectricScheduleInfo">
        SELECT
            ei.id,
            ei.sample_id,
            ei.sample_actual_id,
            ei.sample_category,
            ei.sample_model,
            (
                SELECT GROUP_CONCAT(mi.materialCode SEPARATOR ',')
                FROM material_items mi
                WHERE mi.sample_id = ei.sample_id
            ) AS materialCode,
            ei.sample_frequency,
            ei.sample_name,
            ei.version,
            ei.priority,
            ei.sample_leader,
            ei.supplier,
            ei.testProjectCategory,
            ei.testProjects,
            ei.schedule,
            ei.create_time,
            ei.scheduleDays,
            ei.isUsed,
            ei.changeRecord,
            ei.schedule_start_date,
            ei.schedule_end_date,
            ei.isCancel,
            ei.cancel_reason,
            ei.cancel_by,
            ei.cancel_date,
            ei.cancel_code,
            ei.actual_start_time,
            ei.actual_finish_time,
            ei.schedule_color,
            ei.reportReviewTime,
            ei.sampleRecognizeResult,
            ei.tester,
            ei.testDuration,
            ei.filepath,
            ei.update_time,
            ei.remark,
            ei.waitSample_classify
        FROM electric_info ei
        WHERE (
                (ei.schedule_start_date BETWEEN #{schedule_start_date} AND #{schedule_end_date})
                OR (ei.schedule_end_date BETWEEN #{schedule_start_date} AND #{schedule_end_date})
                OR (ei.schedule_start_date &lt;= #{schedule_start_date}
                AND (ei.schedule_end_date &gt;= #{schedule_end_date} OR ei.schedule_end_date IS NULL))
            )
          AND ei.isUsed = 1
        ORDER BY
            ei.update_time ASC
    </select>




    <update id="saveScheduleDays" >
        UPDATE electric_info
        SET
            scheduleDays = #{scheduleDays}
        WHERE
            sample_id = #{sample_id}

    </update>

    <update id="saveRemark" >
        UPDATE electric_info
        SET
            remark = #{remark}
        WHERE
            sample_id = #{sample_id}

    </update>

    <select id="getPassbackByElectricInfoIds" resultType="PassbackData">
        SELECT
        ei.id,
        ei.sample_id,
        ei.sample_actual_id,
        ei.sample_category,
        ei.sample_model,
        (
        SELECT GROUP_CONCAT(mi.materialCode SEPARATOR ',')
        FROM material_items mi
        WHERE mi.sample_id = ei.sample_id
        ) AS materialCode,
        ei.sample_frequency,
        ei.sample_name,
        ei.version,
        ei.priority,
        ei.sample_leader,
        ei.supplier,
        ei.testProjectCategory,
        ei.testProjects,
        ei.schedule,
        ei.create_time,
        ei.scheduleDays,
        ei.isUsed,
        ei.changeRecord,
        ei.schedule_start_date,
        ei.schedule_end_date,
        ei.isCancel,
        ei.cancel_reason,
        ei.cancel_by,
        ei.cancel_date,
        ei.cancel_code,
        ei.actual_start_time,
        ei.actual_finish_time,
        ei.schedule_color,
        ei.reportReviewTime,
        ei.sampleRecognizeResult,
        ei.tester,
        ei.testDuration,
        ei.filepath,
        ei.update_time,
        ei.remark,
        ei.waitSample_classify,
        ei.sample_sender,
        ei.sample_type,
        ei.sample_quantity,
        ei.high_frequency
        FROM electric_info ei
        WHERE ei.sample_id IN
        <foreach collection="electricInfoIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>



    <update id="cancelElectricalCode">
        UPDATE electric_info
        SET
            isUsed = 0,
            isCancel = 1,
            tester = NULL,
            schedule_start_date = NULL,
            schedule_end_date = NULL,
            cancel_reason = CASE
                                WHEN cancel_reason IS NULL OR cancel_reason = '' THEN #{cancel_reason}
                                ELSE CONCAT(cancel_reason, ' | ', #{cancel_reason})
                END,
            cancel_by = CASE
                            WHEN cancel_by IS NULL OR cancel_by = '' THEN #{cancel_by}
                            ELSE CONCAT(cancel_by, ' | ', #{cancel_by})
                END,
            cancel_code = CASE
                              WHEN cancel_code IS NULL OR cancel_code = '' THEN #{cancel_code}
                              ELSE CONCAT(cancel_code, ' | ', #{cancel_code})
                END,
            cancel_date = CASE
                              WHEN cancel_date IS NULL OR cancel_date = '' THEN #{cancel_date}
                              ELSE CONCAT(cancel_date, ' | ', #{cancel_date})
                END
        WHERE sample_id = #{sample_id}
    </update>



    <update id="StartTestElectricalTest">
        UPDATE electric_info
        SET
            actual_start_time = #{actual_start_time},
            schedule = '0'

        WHERE
            sample_id = #{sample_id}
    </update>

    <update id="FinishTestElectricalTest">
        UPDATE electric_info
        SET
            actual_finish_time = #{actual_finish_time},
            schedule = '1',
            testDuration = TIMESTAMPDIFF(SECOND, actual_start_time, #{actual_finish_time}) / 3600.0
        WHERE
            sample_id = #{sample_id}
    </update>


    <select id="queryActualWorkTime" parameterType="String" resultType="String">
        SELECT testDuration FROM electric_info
        WHERE
            sample_id = #{sample_id}
    </select>


    <update id="deleteElectric_info">
        UPDATE electric_info
        SET
            isUsed = 0,
            tester = NULL,
            schedule_start_date = NULL,
            schedule_end_date = NULL,
            waitSample_classify = #{waitSample_classify}
        WHERE
            sample_id = #{sample_id}
    </update>


    <update id="changeIsUsedAsOne">
        UPDATE electric_info
        SET
            isUsed = 1,
            scheduleDays = #{scheduleDays}
        WHERE
            sample_id = #{sample_id}
    </update>


    <insert id="insertElectric_info">
        INSERT INTO electric_info(sample_id,tester,schedule_start_date,schedule_end_date,create_time,update_time,schedule_color,isUsed)
        VALUES (#{sample_id}, #{tester}, #{schedule_start_date}, #{schedule_end_date} , NOW() , NOW() ,#{schedule_color}, 1)
    </insert>

    <update id="updateElectric_info">
        UPDATE electric_info
        SET
            isUsed = 1,
            scheduleDays = #{scheduleDays},
            tester = #{tester},
            schedule_start_date = #{schedule_start_date},
            schedule_end_date = #{schedule_end_date},
            update_time = NOW(),
            waitSample_classify = NULL
        WHERE
            sample_id = #{sample_id}
    </update>


    <select id="getAllTesters" resultType="map">
        SELECT test_engineer_name, engineer_id,responsible_category FROM tb_test_engineer_info
    </select>


    <insert id="insertElectricalTestItem">
        INSERT IGNORE INTO electrical_test_items (
        sample_id,
        ETTestCode,
        testProjectCategory,
        testProjects,
        testOwner,
        testRemark
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{sample_id},
            #{item.ETTestCode},
            #{item.testProjectCategory},
            #{item.testProjects},
            #{item.testOwner},
            #{item.testRemark}
            )
        </foreach>
    </insert>




    <!-- 插入 material_items -->
    <insert id="insertMaterialItem">
        INSERT IGNORE INTO material_items (
        sample_id, STTestCode, materialCode, sample_frequency
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{sample_id},
            #{item.STTestCode},
            #{item.materialCode},
            #{item.sample_frequency}
            )
        </foreach>
    </insert>

    <select id="getAllReceivedData" resultType="PassbackData">
        SELECT
        ei.id,
        ei.sample_id,
        ei.sample_category,
        ei.sample_model,
        ei.sample_frequency,
        ei.sample_name,
        ei.version,
        ei.priority,
        ei.sample_leader,
        ei.supplier,
        ei.testProjects,
        ei.schedule,
        ei.create_time,
        ei.actual_start_time,
        ei.actual_finish_time,
        ei.isCancel,
        ei.cancel_reason,
        ei.cancel_by,
        ei.cancel_code,
        ei.cancel_date,
        ei.tester,
        ei.testDuration,
        ei.reportReviewTime,
        ei.sampleRecognizeResult,
        ei.filepath,
        ei.sample_sender,
        ei.sample_type,
        ei.remark,
        ei.sample_quantity,
        ei.high_frequency,
        ei.productRequirement,
        ei.productApprovalDoc,

        -- ✅ 加了 IFNULL 处理 null 值
        GROUP_CONCAT(DISTINCT CONCAT(
        IFNULL(eti.testProjectCategory, ''), '-',
        IFNULL(eti.testProjects, ''), '-',
        IFNULL(eti.testOwner, ''), '-',
        IFNULL(eti.testRemark, '')
        ) SEPARATOR ', ') AS testProjectCategory,

        GROUP_CONCAT(DISTINCT CONCAT(
        IFNULL(mi.STTestCode, ''), '-',
        IFNULL(mi.materialCode, ''), '-',
        IFNULL(mi.sample_frequency, '')
        ) SEPARATOR ', ') AS materialCode

        FROM
        electric_info ei
        LEFT JOIN electrical_test_items eti ON ei.sample_id = eti.sample_id
        LEFT JOIN material_items mi ON ei.sample_id = mi.sample_id

        <where>
            <if test="sample_id != null and sample_id != ''">
                ei.sample_id LIKE CONCAT('%', #{sample_id}, '%')
            </if>
        </where>

        GROUP BY ei.id
        ORDER BY ei.create_time DESC;
    </select>


    <select id="getScheduleInfoBySampleId" resultType="map">
        SELECT tester, schedule_start_date, schedule_end_date, update_time, schedule_color, isUsed
        FROM electric_info
        WHERE sample_id = #{sample_id}
    </select>

    <!-- 查询 electric_info 表中的 changeRecord 字段 -->
    <select id="getChangeRecordBySampleId" resultType="String">
        SELECT changeRecord
        FROM electric_info
        WHERE sample_id = #{sample_id}
    </select>

    <!-- 更新 electric_info 表中的 changeRecord 字段 -->
    <update id="updateChangeRecord">
        UPDATE electric_info
        SET changeRecord = #{changeRecord}
        WHERE sample_id = #{sample_id}
    </update>

    <update id="updateElectricInfoColor" parameterType="map">
        UPDATE electric_info
        SET schedule_color = #{schedule_color}
        WHERE sample_id = #{sample_id}
    </update>




    <update id="updateElectricInfoReview">
        UPDATE electric_info
        SET
            reportReviewTime = #{reportReviewTime},
            sampleRecognizeResult = #{sampleRecognizeResult},
            schedule = '2'
        WHERE
            sample_id = #{sample_id}
    </update>

    <update id="updateRdElectricInfoReview">
        UPDATE electric_info
        SET
            reportReviewTime = #{reportReviewTime},
            rd_sampleRecognizeResult = #{rd_sampleRecognizeResult},
            schedule = '2'
        WHERE
            sample_id = #{sample_id}
    </update>

    <update id="saveElectricInfoFilePath">
        UPDATE electric_info
        SET
            filepath = #{filepath}
        WHERE
            sample_id = #{sample_id}
    </update>

    <select id="queryElectricInfoFilepath" resultType="java.lang.String">
        SELECT  filepath FROM electric_info
        WHERE sample_id = #{sample_id}
    </select>

    <update id="saveSystemInfoChange" parameterType="com.lu.ddwyydemo04.pojo.SystemInfo">
        UPDATE system_info
        SET
            personCharge = #{personCharge},
            brand = #{brand},
            area = #{area},
            deviceType = #{deviceType},
            version = #{version},
            osVersion = #{osVersion},
            architecture = #{architecture},
            computerName = #{computerName},
            fullOS = #{fullOS},
            cpu = #{cpu},
            memory = #{memory},
            displays = #{displays},
            maxResolution = #{maxResolution},
            maxRefreshRate = #{maxRefreshRate},
            created_at = NOW(),
            deviceReleaseDate = #{deviceReleaseDate},
            devicePurchaseDate= #{devicePurchaseDate},
            deviceRepairHistory = #{deviceRepairHistory}

        WHERE id = #{id}
    </update>


    <select id="findByComputerName" parameterType="String" resultType="int">
        SELECT count(*) From system_info WHERE computerName = #{computerName}

    </select>

    <insert id="insertSystemInfoByXlsx" parameterType="SystemInfo">
        INSERT INTO system_info (
            personCharge,
            brand,
            area,
            deviceType,
            version,
            osVersion,
            architecture,
            computerName,
            created_at,
            fullOS,
            cpu,
            memory,
            displays,
            maxResolution,
            maxRefreshRate,
            interfaceInfo,
            deviceReleaseDate,
            devicePurchaseDate,
            deviceRepairHistory
        ) VALUES (
                     #{personCharge},
                     #{brand},
                     #{area},
                     #{deviceType},
                     #{version},
                     #{osVersion},
                     #{architecture},
                     #{computerName},
                     NOW(),
                     #{fullOS},
                     #{cpu},
                     #{memory},
                     #{displays},
                     #{maxResolution},
                     #{maxRefreshRate},
                     #{interfaceInfo},
                     #{deviceReleaseDate},
                     #{devicePurchaseDate},
                     #{deviceRepairHistory}
                 );

    </insert>

    <update id="updateSystemInfoByXlsx" parameterType="SystemInfo">
        UPDATE system_info
        SET
        personCharge = #{personCharge},
        brand = #{brand},
        area = #{area},
        deviceType = #{deviceType},
        version = #{version},
        osVersion = #{osVersion},
        architecture = #{architecture},
        fullOS = #{fullOS},
        cpu = #{cpu},
        memory = #{memory},
        displays = #{displays},
        maxResolution = #{maxResolution},
        maxRefreshRate = #{maxRefreshRate},
        interfaceInfo = #{interfaceInfo},
        created_at = NOW(),
        deviceReleaseDate = #{deviceReleaseDate},
        devicePurchaseDate = #{devicePurchaseDate},
        deviceRepairHistory = #{deviceRepairHistory}

        WHERE computerName = #{computerName};
    </update>

    <delete id="deleteSystemInfoById">
        DELETE FROM system_info WHERE id = #{id}
    </delete>


    <select id="queryJobnumberFromUser" resultType="String">
        SELECT job_number FROM users
        WHERE username = #{username}
    </select>

    <select id="getScheduleSampleIdByName" resultType="String">
        SELECT sample_id FROM electric_info
        WHERE tester = #{tester}
          AND isUsed = 1
          AND (sample_actual_id IS NULL OR sample_actual_id = '')
    </select>

    
    <select id="getElectricInfo" resultType="PassbackData">
        SELECT * FROM electric_info WHERE sample_id = #{sample_id}
    </select>

    <select id="getDistinctMaterialCodes" resultType="MaterialItem">
        SELECT DISTINCT materialCode, sample_frequency
        FROM material_items
        WHERE sample_id = #{sample_id}
    </select>

    <insert id="insertSampleFromElectric" parameterType="Samples"
            useGeneratedKeys="true" keyProperty="sample_id">
        INSERT INTO samples (
            tester, tester_teamwork, filepath, sample_model, sample_coding, full_model,
            sample_category, version, sample_name, create_time, sample_schedule,
            sample_frequency, sample_quantity, big_species, small_species, high_frequency,
            questStats, planTestDuration, scheduleStartTime, scheduleEndTime, scheduleTestCycle,electric_sample_id
        ) VALUES (
                     #{tester}, #{tester_teamwork}, #{filepath}, #{sample_model}, #{sample_coding}, #{full_model},
                     #{sample_category}, #{version}, #{sample_name}, NOW(), '0',
                     #{sample_frequency}, #{sample_quantity}, #{big_species}, #{small_species}, #{high_frequency},
                     #{questStats}, #{planTestDuration}, #{scheduleStartTime}, #{scheduleEndTime}, #{scheduleTestCycle}, #{electric_sample_id}
                 )
    </insert>

    <update id="updateActualSampleId">
        UPDATE electric_info
        SET
            sample_actual_id = CASE
                                   WHEN sample_actual_id IS NULL OR sample_actual_id = ''
                                       THEN #{sample_actual_id}
                                   ELSE CONCAT(sample_actual_id, ',', #{sample_actual_id})
                END,
            actual_start_time = #{actual_start_time}
        WHERE sample_id = #{sample_id}
    </update>

    <update id="insertElectric_sample_id">
        UPDATE samples
        SET
            electric_sample_id = #{electric_sample_id}
        WHERE
            sample_id = #{sample_id}
    </update>

    <update id="removeTargetIdFromAllSampleActualIds">
        UPDATE electric_info
        SET
            sample_actual_id = TRIM(BOTH ',' FROM REPLACE(
                    CONCAT(',', sample_actual_id, ','),
                    CONCAT(',', #{targetId}, ','),
                    ','
                                                  )),
            actual_start_time = CASE
                                    WHEN TRIM(BOTH ',' FROM REPLACE(
                                            CONCAT(',', sample_actual_id, ','),
                                            CONCAT(',', #{targetId}, ','),
                                            ','
                                                            )) = '' THEN NULL
                                    ELSE actual_start_time
                END
        WHERE FIND_IN_SET(#{targetId}, sample_actual_id)
    </update>

    <select id="queryElectricIdByActualId" resultType="String">
        SELECT sample_id
        FROM electric_info
        WHERE FIND_IN_SET(#{sample_actual_id}, sample_actual_id);

    </select>

    <update id="updateElectricActualEndTime">
        UPDATE electric_info
        SET actual_finish_time = NOW()
        WHERE sample_id = #{sample_id}
    </update>

    <select id="queryElectric_sample_id" resultType ="String">
        select electric_sample_id FROM samples
        WHERE
            sample_id = #{sample_id}

    </select>

    <update id="updateRemark">
        UPDATE electric_info
        SET remark = #{remark}
        WHERE sample_id = #{sample_id}
    </update>

    <select id="queryRemark" resultType="String">
        select remark
        FROM electric_info
        WHERE sample_id = #{sample_id}
    </select>

    <!-- 获取提单待测试的数量：sample_sender=username 且 actual_start_time 为空 -->
    <select id="getLadingBillWaitTestCount" resultType="int" parameterType="String">
        SELECT COUNT(*)
        FROM electric_info
        WHERE sample_sender = #{username}
          AND actual_start_time IS NULL
          AND isCancel = 0
    </select>

    <!-- 获取测试进行中的数量：sample_sender=username 且 actual_start_time 有值但 actual_finish_time 为空 -->
    <select id="getTestingCount" resultType="int" parameterType="String">
        SELECT COUNT(*)
        FROM electric_info
        WHERE sample_sender = #{username}
          AND actual_start_time IS NOT NULL
          AND actual_finish_time IS NULL
          AND isCancel = 0
    </select>

    <select id="getTrashedProjects" resultType="TrashProject">
        SELECT
            ei.sample_id,
            ei.sample_name,
            ei.sample_model,
            IFNULL(
                    (
                        SELECT GROUP_CONCAT(mi.materialCode SEPARATOR ',')
                        FROM material_items mi
                        WHERE mi.sample_id = ei.sample_id
                    ),
                    ei.materialCode
            ) AS materialCode,
            ei.sample_leader,
            ei.scheduleDays,
            ei.schedule_color,
            ei.waitSample_classify,
            ei.remark,
            ei.cancel_by,
            ei.cancel_code,
            ei.cancel_date,
            ei.cancel_reason
        FROM electric_info ei
        WHERE ei.isCancel = 1
        ORDER BY ei.cancel_date DESC
    </select>

    <update id="recoverProjectById">
        UPDATE electric_info
        SET isCancel = 0
        WHERE
            sample_id = #{sample_id}
    </update>

    <update id="updateElectricSampleId">
        UPDATE electric_info
        SET sample_id = #{newSample_id}
        WHERE sample_id = #{oldSample_id}
    </update>

    <update id="migrateData">
        UPDATE electric_info
        SET
            sample_id = #{oldSample_id},
            sample_actual_id = (
                SELECT actual_sample_actual_id FROM (
                                                        SELECT
                                                            CASE
                                                                WHEN ei2.sample_actual_id IS NOT NULL AND ei2.sample_actual_id != ''
                                                                    THEN ei2.sample_actual_id
                                                                WHEN ei1.sample_actual_id IS NOT NULL AND ei1.sample_actual_id != ''
                                                                    THEN ei1.sample_actual_id
                                                                ELSE NULL
                                                                END AS actual_sample_actual_id
                                                        FROM electric_info ei1
                                                                 LEFT JOIN electric_info ei2 ON ei2.sample_id = #{newSample_id}
                                                        WHERE ei1.sample_id = #{oldSample_id}
                                                        LIMIT 1
                                                    ) AS temp
            ),
            sample_category = (
                SELECT sample_category FROM (
                                                SELECT sample_category FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                            ) AS t1
            ),
            sample_model = (
                SELECT sample_model FROM (
                                             SELECT sample_model FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                         ) AS t2
            ),
            materialCode = (
                SELECT materialCode FROM (
                                             SELECT materialCode FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                         ) AS t3
            ),
            sample_name = (
                SELECT sample_name FROM (
                                            SELECT sample_name FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                        ) AS t4
            ),
            version = (
                SELECT version FROM (
                                        SELECT version FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                    ) AS t5
            ),
            priority = (
                SELECT priority FROM (
                                         SELECT priority FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                     ) AS t6
            ),
            sample_leader = (
                SELECT sample_leader FROM (
                                              SELECT sample_leader FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                          ) AS t7
            ),
            supplier = (
                SELECT supplier FROM (
                                         SELECT supplier FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                     ) AS t8
            ),
            schedule =
                    schedule = (
                    SELECT schedule FROM (
                                             SELECT schedule FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                         ) AS t9
                ),
            sample_frequency =
                    sample_frequency = (
                    SELECT sample_frequency FROM (
                                             SELECT sample_frequency FROM electric_info WHERE sample_id = #{newSample_id} LIMIT 1
                                         ) AS t10
                )
        WHERE sample_id = #{oldSample_id}
    </update>


    <update id="updateSamplesElectircid">
        UPDATE samples
        SET electric_sample_id = #{newElectric_sample_id}
        WHERE electric_sample_id = #{oldElectric_sample_id}
    </update>

    <delete id="deleteElectricInfoBySampleId">
        DELETE FROM electric_info WHERE sample_id = #{sample_id}
    </delete>

    <select id="getAllHolidays" resultType="Holiday">
        select * from holidays
        ORDER BY holiday_date DESC
    </select>

    <insert id="addHoliday">
        INSERT INTO holidays(holiday_date,holiday_name)
        VALUES (#{holiday_date},#{holiday_name})
    </insert>
    
    <select id="queryHoliday" resultType="Integer">
        select count(*) from holidays
        where holiday_date = #{holiday_date}
    </select>

    <update id="updateHoliday">
        UPDATE holidays
        SET holiday_name = #{holiday_name}
        WHERE holiday_date = #{holiday_date}
    </update>

    <delete id="deleteHoliday">
        DELETE FROM holidays WHERE id = #{id}
    </delete>

    <select id="getProductApprovalDoc" resultType="String">
        select productApprovalDoc from electric_info
        WHERE FIND_IN_SET(#{sample_id}, sample_actual_id)
    </select>

    <select id="getProductRequirement" resultType="String">
        SELECT productRequirement
        FROM electric_info
        WHERE FIND_IN_SET(#{sample_id}, sample_actual_id)
    </select>

    <!-- 查询测试项数据 -->
    <select id="getTestItemsBySampleId" resultType="ElectricalTestItem">
        SELECT
            ETTestCode,
            testProjectCategory,
            testProjects,
            testOwner,
            testRemark
        FROM electrical_test_items
        WHERE sample_id = (
            SELECT ei.sample_id
            FROM electric_info ei
            WHERE FIND_IN_SET(#{sample_id}, ei.sample_actual_id) > 0
            LIMIT 1
        )
        ORDER BY ETTestCode
    </select>

    <!-- 变更记录同步相关SQL -->

    <!-- 获取指定时间之后更新的sample_id列表 -->
    <select id="getUpdatedSampleIdsAfterTime" resultType="String">
        SELECT DISTINCT sample_id
        FROM electric_info
        WHERE changeRecord IS NOT NULL
          AND changeRecord != ''
          AND changeRecord != 'null'
          <if test="lastSyncTime != null and lastSyncTime != ''">
            AND update_time > #{lastSyncTime}
          </if>
    </select>

    <!-- 插入变更记录到 change_records 表 -->
    <insert id="insertChangeRecord" parameterType="ChangeRecord">
        INSERT INTO change_records (
            electric_sample_id,
            tester,
            start_date,
            end_date,
            update_time,
            schedule_color,
            is_used,
            remark
        ) VALUES (
            #{electric_sample_id},
            #{tester},
            #{start_date},
            #{end_date},
            #{update_time},
            #{schedule_color},
            #{is_used},
            #{remark}
        )
    </insert>

    <!-- 从 change_records 表获取变更记录 -->
    <select id="getChangeRecordsBySampleId" resultType="ChangeRecord">
        SELECT 
            id,
            electric_sample_id,
            tester,
            start_date,
            end_date,
            update_time,
            schedule_color,
            is_used,
            remark
        FROM change_records
        WHERE electric_sample_id = #{sample_id}
        ORDER BY update_time DESC
    </select>

    <select id="queryCountElectricinfo" parameterType="String" resultType="Integer">
        SELECT COUNT(*) FROM electric_info
        WHERE sample_sender = #{sample_sender}
    </select>

    <!-- 获取提单待测试的项目详情 -->
    <select id="getLadingBillWaitTestDetails" resultType="java.util.Map" parameterType="String">
        SELECT 
            ei.sample_id,
            ei.sample_name,
            ei.sample_model,
            ei.sample_model as fullModel,
            ei.sample_category as bigSpecial,
            ei.sample_type as smallSpecial,
            ei.sample_category as sampleCategory,
            ei.version,
            ei.sample_sender as personInCharge,
            ei.create_time as create_time,
            '1' as node_number,
            '待测试' as status_value
        FROM electric_info ei
        WHERE ei.sample_sender = #{username}
          AND ei.actual_start_time IS NULL
          AND ei.isCancel = 0
        ORDER BY ei.create_time DESC
    </select>

    <!-- 获取测试进行中的项目详情 -->
    <select id="getTestingDetails" resultType="java.util.Map" parameterType="String">
        SELECT 
            ei.sample_id,
            ei.sample_name,
            ei.sample_model,
            ei.sample_model as fullModel,
            ei.sample_category as bigSpecial,
            ei.sample_type as smallSpecial,
            ei.sample_category as sampleCategory,
            ei.version,
            ei.sample_sender as personInCharge,
            ei.create_time as create_time,
            '2' as node_number,
            '测试进行中' as status_value
        FROM electric_info ei
        WHERE ei.sample_sender = #{username}
          AND ei.actual_start_time IS NOT NULL
          AND ei.actual_finish_time IS NULL
          AND ei.isCancel = 0
        ORDER BY ei.create_time DESC
    </select>

    <!-- 获取所有项目详情 -->
    <select id="getAllProjectDetails" resultType="java.util.Map" parameterType="String">
        SELECT 
            ei.sample_id,
            ei.sample_name,
            ei.sample_model,
            ei.sample_model as fullModel,
            ei.sample_category as bigSpecial,
            ei.sample_type as smallSpecial,
            ei.sample_category as sampleCategory,
            ei.version,
            ei.sample_sender as personInCharge,
            ei.create_time as create_time,
            CASE 
                WHEN ei.actual_start_time IS NULL THEN '1'
                WHEN ei.actual_finish_time IS NULL THEN '2'
                ELSE '3'
            END as node_number,
            CASE 
                WHEN ei.actual_start_time IS NULL THEN '待测试'
                WHEN ei.actual_finish_time IS NULL THEN '测试进行中'
                ELSE '已完成'
            END as status_value
        FROM electric_info ei
        WHERE ei.sample_sender = #{username}
          AND ei.isCancel = 0
        ORDER BY ei.create_time DESC
    </select>

    <!-- 获取闭环完成的数量 -->
    <select id="getClosedCount" resultType="int" parameterType="String">
        SELECT COUNT(*)
        FROM electric_info
        WHERE sample_sender = #{username}
          AND sampleRecognizeResult IS NOT NULL
          AND sampleRecognizeResult != ''
          AND sampleRecognizeResult != 'null'
          AND isCancel = 0
    </select>

    <!-- 获取闭环完成的项目详情 -->
    <select id="getClosedDetails" resultType="java.util.Map" parameterType="String">
        SELECT 
            ei.sample_id,
            ei.sample_name,
            ei.sample_model,
            ei.sample_model as fullModel,
            ei.sample_category as bigSpecial,
            ei.sample_type as smallSpecial,
            ei.sample_category as sampleCategory,
            ei.version,
            ei.sample_sender as personInCharge,
            ei.create_time as create_time,
            '3' as node_number,
            '报告确认闭环' as status_value
        FROM electric_info ei
        WHERE ei.sample_sender = #{username}
          AND ei.sampleRecognizeResult IS NOT NULL
          AND ei.sampleRecognizeResult != ''
          AND ei.sampleRecognizeResult != 'null'
          AND ei.isCancel = 0
        ORDER BY ei.create_time DESC
    </select>


    <update id="updateSamplePassbackConfirm">
        UPDATE samples
        SET
            passbackConfirm = #{passbackConfirm}
        WHERE sample_id = #{sample_id}
    </update>
</mapper>
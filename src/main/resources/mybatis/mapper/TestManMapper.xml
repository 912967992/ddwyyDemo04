<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lu.ddwyydemo04.dao.TestManDao">

    <select id="getTestManPanel" resultType="Samples">
        select * from samples where tester =#{tester}  ORDER BY create_time DESC
    </select>

    <select id="queryCountTotal" resultType="int">
        select count(*) from total where name =#{name}
    </select>


    <insert id="createTotal">
        insert into total(testing,pending,completed,total,overdue,danger,name) values(#{testing},#{pending},#{completed},#{total},#{overdue},#{danger},#{name})
    </insert>

<!--    <update id="updateTotal" parameterType="String">-->
<!--        UPDATE total t-->
<!--        SET-->
<!--        t.testing = (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '0' AND s.tester = #{name}),-->
<!--        t.pending = (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '1' AND s.tester = #{name}),-->
<!--        t.completed = (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '2' AND s.tester = #{name}),-->
<!--        t.overdue = (SELECT COUNT(*) FROM samples s WHERE s.tester = #{name}-->
<!--        AND s.create_time >= '2024-09-23 00:00:00'  &lt;!&ndash; 从2024-09-23 00:00:00开始筛选 &ndash;&gt;-->
<!--        AND (-->
<!--        (s.finish_time IS NULL AND NOW() > s.planfinish_time) OR-->
<!--        (s.finish_time IS NOT NULL AND s.planfinish_time &lt; s.finish_time))),-->
<!--        t.danger = (SELECT COUNT(*) FROM samples s WHERE s.danger IS NOT NULL AND s.danger != '' AND s.tester = #{name})-->
<!--        WHERE t.name = #{name}-->
<!--    </update>-->

    <update id="updateTotal" parameterType="String">
        UPDATE total t
        SET
        t.testing = (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '0' AND s.tester = #{name}),
        t.pending = (SELECT COUNT(*) FROM samples s WHERE s.sample_schedule = '1' AND s.tester = #{name}),
        t.completed = (SELECT COUNT(*) FROM samples s WHERE (s.sample_schedule = '2' OR s.sample_schedule = '9' OR s.sample_schedule = '10') AND s.tester = #{name}),
        t.overdue = (SELECT COUNT(*) FROM samples s WHERE s.tester = #{name}
        AND s.create_time >= '2024-11-18 00:00:00'
        AND (
        (s.finish_time IS NULL AND NOW() > s.scheduleEndTime) OR
        (s.finish_time IS NOT NULL AND s.scheduleEndTime &lt; s.finish_time) OR
        (s.sample_schedule = '0' AND NOW() > s.scheduleEndTime)
            )),
        t.danger = (SELECT COUNT(*) FROM samples s WHERE s.danger IS NOT NULL AND s.danger != '' AND s.tester = #{name})
        WHERE t.name = #{name}
    </update>



    <select id="searchSamples" resultType="Samples">
        SELECT * FROM samples
        WHERE
            tester =#{tester}
          AND (
                sample_model LIKE CONCAT('%', #{keyword}, '%')
                OR sample_coding LIKE CONCAT('%', #{keyword}, '%')
                OR sample_name LIKE CONCAT('%', #{keyword}, '%')
                OR full_model LIKE CONCAT('%', #{keyword}, '%')
                OR supplier LIKE CONCAT('%', #{keyword}, '%')
                OR questStats LIKE CONCAT('%',#{keyword},'%')
            );
    </select>

    <select id="searchSamplesByAsc" resultType="Samples">
        SELECT * FROM samples
        WHERE
            tester =#{tester}
          AND (
                    sample_model LIKE CONCAT('%', #{keyword}, '%')
                OR sample_coding LIKE CONCAT('%', #{keyword}, '%')
                OR sample_name LIKE CONCAT('%', #{keyword}, '%')
                OR full_model LIKE CONCAT('%', #{keyword}, '%')
                OR supplier LIKE CONCAT('%', #{keyword}, '%')
                OR questStats LIKE CONCAT('%',#{keyword},'%')
            )
        ORDER BY create_time ASC
    </select>

    <select id="searchSamplesByDesc" resultType="Samples">
        SELECT * FROM samples
        WHERE
            tester =#{tester}
          AND (
                    sample_model LIKE CONCAT('%', #{keyword}, '%')
                OR sample_coding LIKE CONCAT('%', #{keyword}, '%')
                OR sample_name LIKE CONCAT('%', #{keyword}, '%')
                OR full_model LIKE CONCAT('%', #{keyword}, '%')
                OR supplier LIKE CONCAT('%', #{keyword}, '%')
                OR questStats LIKE CONCAT('%',#{keyword},'%')
            )
        ORDER BY create_time DESC
    </select>

    <update id="updateSample" parameterType="Samples">
        UPDATE samples
        SET
            sample_name = #{sample_name},
            chip_control = #{chip_control},
            version_software = #{version_software},
            version_hardware = #{version_hardware},
            supplier = #{supplier},
            test_Overseas = #{test_Overseas},
            sample_DQE = #{sample_DQE},
            sample_Developer = #{sample_Developer},
            tester = #{tester},
            filepath = #{filepath},
            sample_leader = #{sample_leader},
            priority = #{priority},
            sample_remark = #{sample_remark},
            planTestDuration = #{planTestDuration}
        WHERE
            sample_id =#{sample_id}
    </update>

    <update id="updateSampleTeamWork" parameterType="Samples">
        UPDATE samples
        SET
            sample_name = #{sample_name},
            chip_control = #{chip_control},
            version_software = #{version_software},
            version_hardware = #{version_hardware},
            supplier = #{supplier},
            test_Overseas = #{test_Overseas},
            sample_DQE = #{sample_DQE},
            sample_Developer = #{sample_Developer},
            tester = #{tester},
            filepath = #{filepath},
            tester_teamwork = CONCAT(tester_teamwork, ', ', #{tester}),
            sample_leader = #{sample_leader},
            priority = #{priority},
            sample_remark = #{sample_remark},
            planTestDuration = #{planTestDuration}
        WHERE
            sample_id =#{sample_id}
    </update>

    <update id="finishTest" >
        UPDATE samples
        SET
            sample_schedule =#{sample_schedule}
        WHERE
            sample_id =#{sample_id}
    </update>

    <update id="finishTestWithoutTime">
        UPDATE samples
        SET
            sample_schedule = #{sample_schedule},
            finish_time = CASE
                              WHEN finish_time IS NULL AND #{finish_time} IS NOT NULL THEN #{finish_time}
                              ELSE finish_time
                END
        WHERE
            sample_id = #{sample_id}
    </update>






    <select id="queryCreateTime" resultType="java.time.LocalDateTime">
        SELECT create_time FROM samples
        WHERE
                sample_id =#{sample_id}
    </select>

    <select id="queryPlanFinishTime" resultType="java.math.BigDecimal">
        SELECT planTestDuration FROM samples
        WHERE
            sample_id =#{sample_id}
    </select>


    <select id="querySample_name" resultType="String">
        SELECT sample_name FROM samples
        WHERE
            sample_id =#{sample_id}
    </select>

    <select id="queryFilepath" resultType="String">
        SELECT filepath FROM samples
        WHERE
            sample_id = #{sample_id}
    </select>

    <select id="queryTester_teamwork" resultType="String">
        SELECT tester_teamwork FROM samples
        WHERE
                sample_id =#{sample_id}
    </select>


    <select id="queryTester" resultType="String">
        SELECT tester FROM samples
        WHERE
            sample_id =#{sample_id}
    </select>

    <delete id="deleteFromTestIssues">
        DELETE FROM test_issues WHERE sample_id = #{sampleId}
    </delete>
    <delete id="deleteFromSamples">
        DELETE FROM samples WHERE sample_id = #{sampleId}
    </delete>




<!-- 下边是提取问题点的相关模块-->
    <select id="querySampleId" resultType="int">
        SELECT sample_id FROM samples
        WHERE
            filepath = #{filepath}
    </select>

    <insert id="insertTestIssues" parameterType="map">
        INSERT INTO test_issues (
            full_model,
            sample_stage,
            version,
            chip_solution,
            problem_time,
            tester,
            test_platform,
            test_device,
            other_device,
            problem,
            problemCategory,
            problem_image_or_video,
            reproduction_method,
            recovery_method,
            reproduction_probability,
            defect_level,
            current_status,
            comparison_with_previous,
            responsible_person,
            post_improvement_risk,
            next_version_regression_test,
            remark,
            created_at,
            sample_id,
            history_id,
            sku, green_union_dqe, green_union_rd, solution_provider, supplier, review_conclusion
        ) VALUES (
                     #{full_model},
                     #{sample_stage},
                     #{version},
                     #{chip_solution},
                     #{problem_time},
                     #{tester},
                     #{test_platform},
                     #{test_device},
                     #{other_device},
                     #{problem},
                     #{problemCategory},
                     #{problem_image_or_video},
                     #{reproduction_method},
                     #{recovery_method},
                     #{reproduction_probability},
                     #{defect_level},
                     #{current_status},
                     #{comparison_with_previous},
                     #{responsible_person},
                     #{post_improvement_risk},
                     #{next_version_regression_test},
                     #{remark},
                     #{created_at},
                     #{sample_id},
                     #{history_id},
                     #{sku}, #{green_union_dqe}, #{green_union_rd}, #{solution_provider}, #{supplier}, #{review_conclusion}
                 )
    </insert>


    <select id="queryHistoryid" resultType="int">
        SELECT COALESCE(MAX(history_id), 0) + 1
        FROM test_issues
        WHERE sample_id = #{sample_id}
    </select>

    <update id="setDuration" >
        UPDATE samples
        SET
            planTestDuration =#{planTestDuration},
            testDuration =#{testDuration}
        WHERE
            sample_id =#{sample_id}
    </update>


    <select id="searchSampleTestMan" resultType="Samples">
        SELECT * FROM samples
        WHERE
        (#{keyword} IS NULL OR
        sample_model LIKE CONCAT('%', #{keyword}, '%') OR
        sample_coding LIKE CONCAT('%', #{keyword}, '%') OR
        full_model LIKE CONCAT('%', #{keyword}, '%') OR
        sample_name LIKE CONCAT('%', #{keyword}, '%') OR
        sample_category LIKE CONCAT('%', #{keyword}, '%') OR
        version LIKE CONCAT('%', #{keyword}, '%') OR
        supplier LIKE CONCAT('%', #{keyword}, '%') OR
        big_species LIKE CONCAT('%', #{keyword}, '%') OR
        small_species LIKE CONCAT('%', #{keyword}, '%') OR
        priority LIKE CONCAT('%', #{keyword}, '%') OR
        questStats LIKE CONCAT('%', #{keyword}, '%') OR
        tester LIKE CONCAT('%', #{keyword}, '%'))
        AND (#{problemTimeStart} IS NULL OR create_time >= #{problemTimeStart})
        AND (#{problemTimeEnd} IS NULL OR create_time &lt;= #{problemTimeEnd})
        AND (#{problemFinishStart} IS NULL OR finish_time >= #{problemFinishStart})
        AND (#{problemFinishEnd} IS NULL OR finish_time &lt;= #{problemFinishEnd})
        AND (#{sample_schedule} IS NULL OR sample_schedule = #{sample_schedule})
        ORDER BY create_time DESC;
    </select>

    <select id="getInterfaceData" parameterType="Integer" resultType="String">
        SELECT interfaceInfo FROM system_info WHERE id = #{id}
    </select>

    <update id="updateInterface">
        UPDATE system_info
        SET
            interfaceInfo = #{interfaceInfo}
        WHERE
            id =#{id}

    </update>

    <select id="getReceivedData" resultType="PassbackData">
        SELECT * FROM electric_info WHERE isUsed = 0 OR isUsed IS NULL and isCancel = 0
    </select>

    <select id="queryElectricalCode" resultType="Integer">
        SELECT COUNT(*) FROM electric_info WHERE sample_id = #{sample_id}
    </select>

    <insert id="insertElectricInfo" parameterType="PassbackData">
        INSERT INTO electric_info (
            sample_id,
            sample_category,
            sample_model,
            materialCode,
            sample_frequency,
            sample_name,
            version,
            priority,
            sample_leader,
            supplier,
            testProjectCategory,
            testProjects,
            schedule,
            create_time,
            isUsed
        )
        VALUES (
                   #{sample_id},
                   #{sample_category},
                   #{sample_model},
                   #{materialCode},
                   #{sample_frequency},
                   #{sample_name},
                   #{version},
                   #{priority},
                   #{sample_leader},
                   #{supplier},
                   #{testProjectCategory},
                   #{testProjects},
                   #{schedule},
                   NOW(),
                    #{isUsed}
               )
    </insert>

    <update id="updateElectricInfo" parameterType="PassbackData">
        UPDATE electric_info
        SET
            sample_category = #{sample_category},
            sample_model = #{sample_model},
            materialCode = #{materialCode},
            sample_frequency = #{sample_frequency},
            sample_name = #{sample_name},
            version = #{version},
            priority = #{priority},
            sample_leader = #{sample_leader},
            supplier = #{supplier},
            testProjectCategory = #{testProjectCategory},
            testProjects = #{testProjects},
            schedule = #{schedule},
            isUsed = #{isUsed}
        WHERE sample_id = #{sample_id}
    </update>

    <select id="getAllSchedules" resultType="ElectricScheduleInfo">
        SELECT * FROM electric_schedule_info
    </select>

    <select id="getCountSchedules" resultType="int">
        SELECT count(*) FROM electric_schedule_info WHERE sample_id = #{sample_id}
    </select>

    <!-- 根据开始日期查询排期信息 -->
    <select id="getSchedulesByStartDate" resultType="ElectricScheduleInfo">
        SELECT *
        FROM electric_schedule_info
        WHERE (schedule_start_date >= #{schedule_start_date}
            OR (schedule_end_date >= #{schedule_start_date} AND schedule_end_date IS NOT NULL))
          AND isUsed = 1
    </select>


    <select id="getSchedulesByStartAndEndDate" resultType="ElectricScheduleInfo">
        SELECT *
        FROM electric_schedule_info
        WHERE (
        (schedule_start_date BETWEEN #{schedule_start_date} AND #{schedule_end_date})
        OR (schedule_end_date BETWEEN #{schedule_start_date} AND #{schedule_end_date})
        OR (schedule_start_date &lt;= #{schedule_start_date}
        AND (schedule_end_date >= #{schedule_end_date} OR schedule_end_date IS NULL))
        )
        AND isUsed = 1
    </select>



    <update id="saveScheduleDays" >
        UPDATE electric_info
        SET
            scheduleDays = #{scheduleDays}
        WHERE
            sample_id = #{sample_id}

    </update>

    <select id="getPassbackByElectricInfoIds" resultType="PassbackData">
        SELECT *
        FROM electric_info
        WHERE sample_id IN
        <foreach collection="electricInfoIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>


    <update id="cancelElectricalCode">
        UPDATE electric_info
        SET
            isCancel = 1,
            cancel_reason = CASE
                                WHEN cancel_reason IS NULL OR cancel_reason = '' THEN #{cancel_reason}
                                ELSE CONCAT(cancel_reason, ' | ', #{cancel_reason})
                END,
            cancel_by = CASE
                            WHEN cancel_by IS NULL OR cancel_by = '' THEN #{cancel_by}
                            ELSE CONCAT(cancel_by, ' | ', #{cancel_by})
                END,
            cancel_code = CASE
                              WHEN cancel_code IS NULL OR cancel_code = '' THEN #{cancel_code}
                              ELSE CONCAT(cancel_code, ' | ', #{cancel_code})
                END,
            cancel_date = CASE
                              WHEN cancel_date IS NULL OR cancel_date = '' THEN #{cancel_date}
                              ELSE CONCAT(cancel_date, ' | ', #{cancel_date})
                END
        WHERE sample_id = #{sample_id}
    </update>

    <update id="StartTestElectricalTest">
        UPDATE electric_info
        SET
            actual_start_time = #{actual_start_time},
            schedule = "0"

        WHERE
            sample_id = #{sample_id}
    </update>

    <update id="FinishTestElectricalTest">
        UPDATE electric_info
        SET
            actual_finish_time = #{actual_finish_time},
            schedule = "1",
            testDuration = TIMESTAMPDIFF(SECOND, actual_start_time, #{actual_finish_time}) / 3600.0
        WHERE
            sample_id = #{sample_id}
    </update>


    <select id="queryActualWorkTime" parameterType="String" resultType="String">
        SELECT testDuration FROM electric_info
        WHERE
            sample_id = #{sample_id}
    </select>


    <update id="deleteElectric_schedule_info">
        UPDATE electric_schedule_info es
            JOIN electric_info ei
        ON es.sample_id = ei.sample_id
            SET
                es.isUsed = 0,
                es.update_time = NOW(),
                es.schedule_start_date = NULL,
                es.schedule_end_date = NULL,
                es.tester = NULL,
                ei.isUsed = 0
        WHERE
            ei.sample_id = #{sample_id}
    </update>


    <update id="changeIsUsedAsOne">
        UPDATE electric_info
        SET
            isUsed = 1,
            scheduleDays = #{scheduleDays}
        WHERE
            sample_id = #{sample_id}
    </update>


    <insert id="insertElectric_schedule_info">
        INSERT INTO electric_schedule_info(sample_id,tester,schedule_start_date,schedule_end_date,create_time,update_time,sizecoding,schedule_color)
        VALUES (#{sample_id}, #{tester}, #{schedule_start_date}, #{schedule_end_date} , NOW() , NOW() ,#{sizecoding},#{schedule_color})
    </insert>

    <update id="updateElectric_schedule_info">
        UPDATE electric_schedule_info es
            JOIN electric_info ei
        ON es.sample_id = ei.sample_id
            SET
                es.tester = #{tester},
                es.schedule_start_date = #{schedule_start_date},
                es.schedule_end_date = #{schedule_end_date},
                es.update_time = NOW(),
                es.isUsed = 1,
                es.schedule_color = #{schedule_color},
                ei.isUsed = 1,
                ei.scheduleDays = #{scheduleDays},
                ei.tester = #{tester}
        WHERE
            es.sample_id = #{sample_id}
    </update>


    <select id="getAllTesters" resultType="map">
        SELECT test_engineer_name, engineer_id,responsible_category FROM tb_test_engineer_info
    </select>


    <!-- 正确绑定方法名 insertElectricalTestItem -->
<!--    <insert id="insertElectricalTestItem">-->
<!--        INSERT INTO electrical_test_items (-->
<!--        sample_id, ETTestCode, testProjectCategory, testProjects-->
<!--        ) VALUES-->
<!--        <foreach collection="list" item="item" separator=",">-->
<!--            (-->
<!--            (SELECT sample_id FROM electric_info WHERE sample_id = #{sample_id}),-->
<!--            #{item.ETTestCode},-->
<!--            #{item.testProjectCategory},-->
<!--            #{item.testProjects}-->
<!--            )-->
<!--        </foreach>-->
<!--    </insert>-->
    <insert id="insertElectricalTestItem">
        INSERT INTO electrical_test_items (
        sample_id, ETTestCode, testProjectCategory, testProjects
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{sample_id},
            #{item.ETTestCode},
            #{item.testProjectCategory},
            #{item.testProjects}
            )
        </foreach>
    </insert>



    <!-- 插入 material_items -->
    <insert id="insertMaterialItem">
        INSERT INTO material_items (
        sample_id, STTestCode, materialCode, sample_frequency
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            (SELECT sample_id FROM electric_info WHERE sample_id = #{sample_id}),
            #{item.STTestCode},
            #{item.materialCode},
            #{item.sample_frequency}
            )
        </foreach>
    </insert>

    <select id="getAllReceivedData" resultType="PassbackData">
        SELECT
            ei.id,
            ei.sample_id,
            ei.sample_category,
            ei.sample_model,
            -- ei.materialCode,  // 如果不需要，保持注释
            ei.sample_frequency,
            ei.sample_name,
            ei.version,
            ei.priority,
            ei.sample_leader,
            ei.supplier,
            -- ei.testProjectCategory,  // 如果不需要，保持注释
            ei.testProjects,
            ei.schedule,
            ei.create_time,
            ei.actual_start_time,
            ei.actual_finish_time,
            ei.isCancel,
            ei.cancel_reason,
            ei.cancel_by,
            ei.cancel_code,
            ei.cancel_date,
            ei.tester,
            ei.testDuration,
            ei.reportReviewTime,
            ei.sampleRecognizeResult,
            ei.filepath,
            -- 合并 electrical_test_items 表中的数据，使用 DISTINCT 去重
            GROUP_CONCAT(DISTINCT CONCAT(eti.ETTestCode, '-', eti.testProjectCategory, '-', eti.testProjects) SEPARATOR ', ') AS testProjectCategory,
            -- 合并 material_items 表中的数据，使用 DISTINCT 去重
            GROUP_CONCAT(DISTINCT CONCAT(mi.STTestCode, '-', mi.materialCode, '-', mi.sample_frequency) SEPARATOR ', ') AS materialCode
        FROM
            electric_info ei
                LEFT JOIN electrical_test_items eti ON ei.sample_id = eti.sample_id
                LEFT JOIN material_items mi ON ei.sample_id = mi.sample_id
        <where>
            <if test="sample_id != null and sample_id != ''">
                ei.sample_id LIKE CONCAT('%', #{sample_id}, '%')
            </if>
        </where>
        GROUP BY
            ei.id
        ORDER BY
            ei.create_time DESC;
    </select>


    <!-- 查询 electric_schedule_info 中记录 -->
    <select id="getScheduleInfoBySampleId" resultType="map">
        SELECT tester, schedule_start_date, schedule_end_date, update_time, schedule_color, isUsed
        FROM electric_schedule_info
        WHERE sample_id = #{sample_id}
    </select>

    <!-- 查询 electric_info 表中的 changeRecord 字段 -->
    <select id="getChangeRecordBySampleId" resultType="string">
        SELECT changeRecord
        FROM electric_info
        WHERE sample_id = #{sample_id}
    </select>

    <!-- 更新 electric_info 表中的 changeRecord 字段 -->
    <update id="updateChangeRecord">
        UPDATE electric_info
        SET changeRecord = #{changeRecord}
        WHERE sample_id = #{sample_id}
    </update>

    <update id="updateElectricInfoColor" parameterType="map">
        UPDATE electric_info
        SET schedule_color = #{schedule_color}
        WHERE sample_id = #{sample_id}
    </update>

    <update id="updateScheduleInfoColorIfExists" parameterType="map">
        UPDATE electric_schedule_info
        SET schedule_color = #{schedule_color}
        WHERE sample_id = #{sample_id}
    </update>


    <update id="updateElectricInfoReview">
        UPDATE electric_info
        SET
            reportReviewTime = #{reportReviewTime},
            sampleRecognizeResult = #{sampleRecognizeResult},
            schedule = "2"
        WHERE
            sample_id = #{sample_id}
    </update>

    <update id="saveElectricInfoFilePath">
        UPDATE electric_info
        SET
            filepath = #{filepath}
        WHERE
            sample_id = #{sample_id}
    </update>

    <select id="queryElectricInfoFilepath" resultType="java.lang.String">
        SELECT  filepath FROM electric_info
        WHERE sample_id = #{sample_id}
    </select>

    <update id="saveSystemInfoChange" parameterType="com.lu.ddwyydemo04.pojo.SystemInfo">
        UPDATE system_info
        SET
            personCharge = #{personCharge},
            brand = #{brand},
            area = #{area},
            deviceType = #{deviceType},
            version = #{version},
            osVersion = #{osVersion},
            architecture = #{architecture},
            computerName = #{computerName},
            fullOS = #{fullOS},
            cpu = #{cpu},
            memory = #{memory},
            displays = #{displays},
            maxResolution = #{maxResolution},
            maxRefreshRate = #{maxRefreshRate},
            created_at = NOW()
        WHERE id = #{id}
    </update>


    <select id="findByComputerName" parameterType="String" resultType="int">
        SELECT count(*) From system_info WHERE computerName = #{computerName}

    </select>

    <insert id="insertSystemInfoByXlsx" parameterType="SystemInfo">
        INSERT INTO system_info (
            personCharge,
            brand,
            area,
            deviceType,
            version,
            osVersion,
            architecture,
            computerName,
            created_at,
            fullOS,
            cpu,
            memory,
            displays,
            maxResolution,
            maxRefreshRate,
            interfaceInfo
        ) VALUES (
                     #{personCharge},
                     #{brand},
                     #{area},
                     #{deviceType},
                     #{version},
                     #{osVersion},
                     #{architecture},
                     #{computerName},
                     NOW(),
                     #{fullOS},
                     #{cpu},
                     #{memory},
                     #{displays},
                     #{maxResolution},
                     #{maxRefreshRate},
                     #{interfaceInfo}
                 );

    </insert>

    <update id="updateSystemInfoByXlsx" parameterType="SystemInfo">
        UPDATE system_info
        SET
        personCharge = #{personCharge},
        brand = #{brand},
        area = #{area},
        deviceType = #{deviceType},
        version = #{version},
        osVersion = #{osVersion},
        architecture = #{architecture},
        fullOS = #{fullOS},
        cpu = #{cpu},
        memory = #{memory},
        displays = #{displays},
        maxResolution = #{maxResolution},
        maxRefreshRate = #{maxRefreshRate},
        interfaceInfo = #{interfaceInfo},
        created_at = NOW()  <!-- 可选，假如你要更新创建时间 -->
        WHERE computerName = #{computerName};
    </update>

    <delete id="deleteSystemInfoById">
        DELETE FROM system_info WHERE id = #{id}
    </delete>


    <select id="queryJobnumberFromUser" resultType="String">
        SELECT job_number FROM users
        WHERE username = #{username}
    </select>

</mapper>
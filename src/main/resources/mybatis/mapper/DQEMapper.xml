<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lu.ddwyydemo04.dao.DQE.DQEDao">

    <select id="searchTestissues" resultType="TestIssues">
        select * from test_issues
    </select>

    <select id="selectTestIssues" resultType="TestIssues">
        SELECT * FROM test_issues
        WHERE id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="selectTestIssuesFromSampleid" resultType="TestIssues">
        SELECT *
        FROM test_issues
        WHERE sample_id = #{sampleId}
          AND (
                (created_by = 'tester' AND history_id = (
                    SELECT MAX(history_id)
                    FROM test_issues
                    WHERE sample_id = #{sampleId}
                      AND created_by = 'tester'
                ))
                OR created_by != 'tester'
            )
    </select>

    <select id="searchSamplesDQE" resultType="Samples">
        SELECT * FROM samples
        WHERE
        (#{sample_id} IS NULL OR sample_id LIKE CONCAT('%', #{sample_id}, '%'))
        AND (#{full_model} IS NULL OR full_model LIKE CONCAT('%', #{full_model}, '%'))
        AND (#{questStats} IS NULL OR questStats LIKE CONCAT('%', #{questStats}, '%'))
        AND (#{sample_category} IS NULL OR sample_category LIKE CONCAT('%', #{sample_category}, '%'))
        AND (#{version} IS NULL OR version LIKE CONCAT('%', #{version}, '%'))
        AND (#{big_species} IS NULL OR big_species LIKE CONCAT('%', #{big_species}, '%'))
        AND (#{small_species} IS NULL OR small_species LIKE CONCAT('%', #{small_species}, '%'))
        AND (#{supplier} IS NULL OR supplier LIKE CONCAT('%', #{supplier}, '%'))
        AND (#{test_Overseas} IS NULL OR test_Overseas LIKE CONCAT('%', #{test_Overseas}, '%'))
        AND (#{sample_DQE} IS NULL OR sample_DQE LIKE CONCAT('%', #{sample_DQE}, '%'))
        AND (#{sample_Developer} IS NULL OR sample_Developer LIKE CONCAT('%', #{sample_Developer}, '%'))
        AND (#{tester} IS NULL OR tester LIKE CONCAT('%', #{tester}, '%'))
        AND (#{priority} IS NULL OR priority LIKE CONCAT('%', #{priority}, '%'))
        AND (#{sample_schedule} IS NULL OR sample_schedule LIKE CONCAT('%', #{sample_schedule}, '%'))
        AND (#{result_judge} IS NULL OR result_judge LIKE CONCAT('%', #{result_judge}, '%'))
        AND (#{rd_result_judge} IS NULL OR rd_result_judge LIKE CONCAT('%', #{rd_result_judge}, '%'))
        AND (#{problemTimeStart} IS NULL OR finish_time >= #{problemTimeStart})
        AND (#{problemTimeEnd} IS NULL OR finish_time &lt; DATE_ADD(#{problemTimeEnd}, INTERVAL 1 DAY))
        AND (#{sample_leader} IS NULL OR sample_leader LIKE CONCAT('%', #{sample_leader}, '%'))
        -- 新加的模糊搜索条件
        AND (#{key} IS NULL OR
        sample_id LIKE CONCAT('%', #{key}, '%') OR
        full_model LIKE CONCAT('%', #{key}, '%') OR
        questStats LIKE CONCAT('%', #{key}, '%') OR
        sample_category LIKE CONCAT('%', #{key}, '%') OR
        version LIKE CONCAT('%', #{key}, '%') OR
        big_species LIKE CONCAT('%', #{key}, '%') OR
        small_species LIKE CONCAT('%', #{key}, '%') OR
        supplier LIKE CONCAT('%', #{key}, '%') OR
        test_Overseas LIKE CONCAT('%', #{key}, '%') OR
        sample_DQE LIKE CONCAT('%', #{key}, '%') OR
        sample_Developer LIKE CONCAT('%', #{key}, '%') OR
        tester LIKE CONCAT('%', #{key}, '%') OR
        priority LIKE CONCAT('%', #{key}, '%') OR
        sample_schedule LIKE CONCAT('%', #{key}, '%') OR
        result_judge LIKE CONCAT('%', #{key}, '%') OR
        rd_result_judge LIKE CONCAT('%', #{key}, '%') OR
        sample_leader LIKE CONCAT('%', #{key}, '%'))
        ORDER BY finish_time DESC;
    </select>





    <select id="addNewRow" resultType="Map">
        SELECT s.full_model, s.sample_category, s.version,
               ti.max_history_id
        FROM samples s
                 INNER JOIN (
            SELECT sample_id, MAX(history_id) AS max_history_id
            FROM test_issues
            WHERE created_by = 'tester'
            GROUP BY sample_id
        ) ti ON s.sample_id = ti.sample_id
        WHERE s.sample_id = #{sampleId}

    </select>

    <select id="addNewRowHistroyidZero" resultType="Map">
        SELECT full_model, sample_category, version
        FROM samples s
        WHERE sample_id = #{sampleId}

    </select>




    <select id="searchTestIssuesHistroyidFromId" resultType="java.lang.Integer">
        SELECT COALESCE(MAX(history_id), 0) AS max_history_id
        FROM test_issues
        WHERE sample_id = #{sampleId};
    </select>


    <insert id="insertTestIssues" parameterType="TestIssues">
        INSERT INTO test_issues (
            full_model, sample_stage, version, chip_solution, test_platform,
            test_device, other_device, problem,problemCategory,
            problem_time, reproduction_method, recovery_method, reproduction_probability,
            defect_level, current_status, comparison_with_previous, tester,
            dqe_and_development_confirm, improvement_plan, responsible_person,
            post_improvement_risk, next_version_regression_test, remark,
            created_at, history_id, sample_id, created_by,
            dqe_confirm,dqe_review_at,dqe,rd_confirm,rd_review_at,rd,
            modifier,modify_at, responsibleDepartment,
            sku, green_union_dqe, green_union_rd, solution_provider, supplier, review_conclusion
        ) VALUES (
                     #{full_model}, #{sample_stage}, #{version}, #{chip_solution}, #{test_platform},
                     #{test_device}, #{other_device}, #{problem},#{problemCategory},
                     #{problem_time}, #{reproduction_method}, #{recovery_method},
                     #{reproduction_probability}, #{defect_level}, #{current_status},
                     #{comparison_with_previous}, #{tester}, #{dqe_and_development_confirm},
                     #{improvement_plan}, #{responsible_person}, #{post_improvement_risk},
                     #{next_version_regression_test}, #{remark}, #{created_at},
                     #{history_id}, #{sample_id}, #{created_by},
                     #{dqe_confirm},#{dqe_review_at},#{dqe},#{rd_confirm},#{rd_review_at},#{rd},
                     #{modifier},#{modify_at} ,#{responsibleDepartment},
                     #{sku},  #{green_union_dqe}, #{green_union_rd}, #{solution_provider}, #{supplier}, #{review_conclusion}
                 );
    </insert>

    <update id="updateTestIssues" parameterType="TestIssues">
        UPDATE test_issues
        SET
            full_model = #{full_model},
            sample_stage = #{sample_stage},
            version = #{version},
            chip_solution = #{chip_solution},
            test_platform = #{test_platform},
            test_device = #{test_device},
            other_device = #{other_device},
            problem = #{problem},
            problemCategory = #{problemCategory},
            problem_time = #{problem_time},
            reproduction_method = #{reproduction_method},
            recovery_method = #{recovery_method},
            reproduction_probability = #{reproduction_probability},
            defect_level = #{defect_level},
            current_status = #{current_status},
            comparison_with_previous = #{comparison_with_previous},
            tester = #{tester},
            dqe_and_development_confirm = #{dqe_and_development_confirm},
            improvement_plan = #{improvement_plan},
            responsible_person = #{responsible_person},
            post_improvement_risk = #{post_improvement_risk},
            next_version_regression_test = #{next_version_regression_test},
            remark = #{remark},
            created_at = #{created_at},
            history_id = #{history_id},
            sample_id = #{sample_id},
            created_by = #{created_by},
            dqe_confirm = #{dqe_confirm},
            dqe_review_at = #{dqe_review_at},
            dqe = #{dqe},
            rd_confirm = #{rd_confirm},
            rd_review_at = #{rd_review_at},
            rd = #{rd},
            modifier = #{modifier},
            modify_at = #{modify_at},
            responsibleDepartment = #{responsibleDepartment},
            sku = #{sku},
            green_union_dqe  = #{green_union_dqe},
            green_union_rd = #{green_union_rd},
            solution_provider  = #{solution_provider},
            supplier = #{supplier},
            review_conclusion = #{review_conclusion}
        WHERE
            id = #{id}
    </update>

    <delete id="deleteProblemById" parameterType="Long">
        DELETE FROM test_issues
        WHERE id = #{id}
    </delete>

    <update id="uploadImage" parameterType="map">
        UPDATE test_issues
        SET problem_image_or_video = #{problem_image_or_video}
        WHERE id = #{id}
    </update>

    <select id="searchScheduleAndResultJudge" parameterType="String" resultType="java.util.HashMap">
        SELECT sample_schedule, result_judge, sample_DQE, sample_Developer, tester,sample_leader, rd_result_judge FROM samples WHERE sample_id = #{sample_id}
    </select>


    <update id="updateSampleWithSchAndResult">
        UPDATE samples
        <set>
            sample_schedule = #{sample_schedule},
            <if test="job == 'DQE' and selectedOption != null">
                result_judge = #{selectedOption},
            </if>
            <if test="job == 'rd' and selectedOption != null">
                rd_result_judge = #{selectedOption},
            </if>
        </set>
        WHERE sample_id = #{sample_id}
    </update>


    <select id="getFilePathBySampleId" resultType="String">
        SELECT filepath FROM samples
        WHERE sample_id = #{sample_id}
    </select>

    <select id="querySamples" resultType="Samples">
        SELECT * FROM samples WHERE sample_id = #{sample_id}
    </select>


    <select id="queryWarnDays" resultType="String">
        SELECT warn_Days FROM setting
        WHERE setting_role = #{setting_role}
    </select>


<!--    定时任务。每天12点去获取userid并覆盖-->
    <insert id="insertOrUpdateUser" parameterType="com.lu.ddwyydemo04.pojo.User">
        INSERT INTO users (userId, username, deptId, majorDeptId, departmentName, position)
        VALUES (#{userId}, #{username}, #{deptId}, #{majorDeptId}, #{departmentName}, #{position})
            ON DUPLICATE KEY UPDATE
                                 username = #{username},
                                 deptId = #{deptId},
                                 majorDeptId = #{majorDeptId},
                                 departmentName = #{departmentName},
                                 position = #{position}
    </insert>


    <select id="getUserIdByName" resultType="String">
        SELECT userId FROM users
        WHERE username = #{username}
    </select>

    <insert id="insertTaskNode" parameterType="com.lu.ddwyydemo04.pojo.TaskNode">
        INSERT INTO task_nodes (sample_id, node_number, task_id, status_value, create_time, warn_time, isOverdue)
        VALUES (#{sample_id}, #{node_number}, #{task_id}, #{status_value}, #{create_time}, #{warn_time}, #{isOverdue})
    </insert>


    <update id="updatePreviousNodes">
    UPDATE task_nodes
    SET status_value = #{status_value}, isOverdue = false
    WHERE node_number &lt; #{node_number} AND sample_id = #{sample_id};
    </update>


    <select id="selectTaskId" resultType="java.lang.Long">
        SELECT task_id FROM task_nodes
        WHERE sample_id = #{sample_id}
    </select>

    <update id="updateSetting" parameterType="map">
        UPDATE setting
        SET warn_days = #{warn_days}
        WHERE setting_role = #{setting_role}
    </update>


    <!-- 节点进度表第一次超时查询方法 -->
    <select id="findOnceOverdueSampleIds" resultType="map" parameterType="java.time.LocalDateTime">
        SELECT id,sample_id, node_number,create_time,warn_time
        FROM task_nodes
        WHERE node_number &lt; 4
        AND isOverdue IS NULL
        AND warn_time &lt; #{currentTime}
        AND notify_once IS NULL
    </select>

    <!-- 节点进度表第二次DQE超时查询方法 -->
    <select id="findSecondOverdueSampleIdsDQE" resultType="map" parameterType="java.time.LocalDateTime">
        SELECT id,sample_id, node_number, create_time, warn_time
        FROM task_nodes
        WHERE (node_number = 1 OR node_number = 3)
          AND isOverdue = 1
          AND warn_time &lt; #{currentTime}
          AND notify_once = 1
          AND notify_second IS NULL
          AND create_time >= '2024-12-07 00:00:00'
    </select>

    <select id="findSecondOverdueSampleIdsRD" resultType="map" parameterType="java.time.LocalDateTime">
        SELECT id,sample_id, node_number, create_time, warn_time
        FROM task_nodes
        WHERE node_number = 2
          AND isOverdue = 1
          AND warn_time &lt; #{currentTime}
          AND notify_once = 1
          AND notify_second IS NULL
          AND create_time >= '2024-12-07 00:00:00'
    </select>

    <update id="updateTaskNodesOnce">
        UPDATE task_nodes
        SET notify_once = 1, isOverdue = true,
            notify_once_time = #{currentTime}
        WHERE id = #{id}
    </update>

    <update id="updateTaskNodesSecond">
        UPDATE task_nodes
        SET notify_second = 1, isOverdue = true,
         notify_second_time = #{currentTime}
        WHERE id =#{id}
    </update>

    <select id="findFirstOverdueSamplesOnce" resultType="com.lu.ddwyydemo04.pojo.TaskNode" >
        SELECT *
        FROM task_nodes
        WHERE notify_once = 1
        ORDER BY warn_time DESC

    </select>

    <select id="findSecondOverdueSamplesSecond" resultType="com.lu.ddwyydemo04.pojo.TaskNode" >
        SELECT *
        FROM task_nodes
        WHERE notify_second = 1
        ORDER BY warn_time DESC
    </select>


    <select id="selectFromSampleId" resultType="com.lu.ddwyydemo04.pojo.Samples" >
        SELECT *
        FROM samples
        WHERE sample_id = #{sample_id}

    </select>

    <select id="getWarningDaysByManager" resultType="String" >
        SELECT warn_days
        FROM setting
        WHERE setting_role = #{manager}

    </select>

    <update id="updateOverdueReason">
        UPDATE task_nodes SET overdueReason =#{overdueReason}
        WHERE id =#{id}
    </update>

    <select id="getRecentNotifications" resultType="com.lu.ddwyydemo04.pojo.TaskNode" >
        SELECT *
        FROM task_nodes
        WHERE isOverdue IS NULL
          AND warn_time IS NOT NULL
        ORDER BY create_time DESC

    </select>


    <!-- 查询各等级的数量 -->
    <select id="countDefectLevelsBySampleId" resultMap="defectLevelCountMap">
        SELECT
            CASE
                WHEN defect_level_lower = 's' THEN 'S'
                WHEN defect_level_lower = 'a' THEN 'A'
                WHEN defect_level_lower = 'b' THEN 'B'
                WHEN defect_level_lower = 'c' THEN 'C'
                ELSE '待确定'
                END AS defect_level_upper,
            COUNT(*) AS count
        FROM (
            SELECT
            CASE
            WHEN LOWER(t.defect_level) IN ('s', 'a', 'b', 'c') THEN LOWER(t.defect_level)
            WHEN t.defect_level IS NULL OR LOWER(t.defect_level) = 'pending' THEN '待确定'
            ELSE '其他' -- 用于捕获不在预期范围的值
            END AS defect_level_lower
            FROM
            test_issues t
            LEFT JOIN (
            SELECT
            sample_id,
            MAX(history_id) AS max_history_id
            FROM
            test_issues
            WHERE
            created_by = 'tester'
            GROUP BY
            sample_id
            ) AS latest_tester_issue ON t.sample_id = latest_tester_issue.sample_id
            AND t.history_id = latest_tester_issue.max_history_id
            WHERE
            t.sample_id = #{sampleId}
            AND (t.created_by != 'tester' OR t.history_id = latest_tester_issue.max_history_id)
            ) AS defect_levels
        GROUP BY
            defect_level_upper
        ORDER BY
            FIELD(defect_level_upper, 'S', 'A', 'B', 'C', '待确定');
    </select>

    <!-- 结果映射，返回 defect_level_upper 和 count -->
    <resultMap id="defectLevelCountMap" type="map">
        <result property="defect_level_upper" column="defect_level_upper"/>
        <result property="count" column="count"/>
    </resultMap>






    <!-- 插入系统信息 -->
    <insert id="insertSys" parameterType="com.lu.ddwyydemo04.pojo.SystemInfo">
        INSERT INTO system_info (version, installationDate, osVersion,
                                 architecture, computerName, systemModel, fullOS,
                                 cpu, memory, displays , networkAdapters , created_at)
        VALUES (#{version}, #{installationDate}, #{osVersion},
                #{architecture}, #{computerName}, #{systemModel}, #{fullOS},
                #{cpu},#{memory},#{displays},#{networkAdapters}, NOW())
    </insert>

    <!-- 查询 Computer Name 是否存在 -->
    <select id="checkIfComputerNameExists" resultType="int" parameterType="String">
        SELECT COUNT(*)
        FROM system_info
        WHERE computerName = #{computerName}
    </select>

    <!-- 更新系统信息 -->
    <update id="updateSys" parameterType="com.lu.ddwyydemo04.pojo.SystemInfo">
        UPDATE system_info
        SET
        version = #{version},
        installationDate = #{installationDate},
        osVersion = #{osVersion},
        architecture = #{architecture},
        systemModel = #{systemModel},
        fullOS = #{fullOS},
        cpu = #{cpu},
        memory = #{memory},
        displays = #{displays},
        networkAdapters = #{networkAdapters},
        created_at =  NOW()
        WHERE computerName = #{computerName}
    </update>


    <update id="updatepProblemCounts">
        UPDATE samples SET problemCounts =#{problemCounts}
        WHERE sample_id =#{sample_id}
    </update>


    <delete id="deleteTaskNodeBefore">
        DELETE FROM task_nodes
        WHERE sample_id = #{sample_id}
    </delete>

    <select id="performSysInfo" resultType="com.lu.ddwyydemo04.pojo.SystemInfo">
        SELECT * FROM system_info
        WHERE
            (#{id} IS NULL OR id LIKE CONCAT('%', #{id}, '%'))
          AND (#{computerName} IS NULL OR computerName LIKE CONCAT('%', #{computerName}, '%'))
          AND (#{version} IS NULL OR version LIKE CONCAT('%', #{version}, '%'))
          AND (#{installationDate} IS NULL OR installationDate LIKE CONCAT('%', #{installationDate}, '%'))
          AND (#{osVersion} IS NULL OR osVersion LIKE CONCAT('%', #{osVersion}, '%'))
          AND (#{fullOS} IS NULL OR fullOS LIKE CONCAT('%', #{fullOS}, '%'))
          AND (#{architecture} IS NULL OR architecture LIKE CONCAT('%', #{architecture}, '%'))
          AND (#{systemModel} IS NULL OR systemModel LIKE CONCAT('%', #{systemModel}, '%'))
          AND (#{cpu} IS NULL OR cpu LIKE CONCAT('%', #{cpu}, '%'))
          AND (#{memory} IS NULL OR memory LIKE CONCAT('%', #{memory}, '%'))
          AND (#{displays} IS NULL OR displays LIKE CONCAT('%', #{displays}, '%'))
          AND (#{networkAdapters} IS NULL OR networkAdapters LIKE CONCAT('%', #{networkAdapters}, '%'))

    </select>

    <select id="getJobFromUsers" resultType="String">
        SELECT position FROM users WHERE username =#{username}
    </select>


</mapper>